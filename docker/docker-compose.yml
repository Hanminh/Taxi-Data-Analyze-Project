version: "3"

services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
  
  kafka_broker:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_broker:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_LOG_RETENTION_HOURS: 720
      KAFKA_LOG_RETENTION_BYTES: 100000000000
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      mynetwork:
        aliases:
          - kafka_broker

  kafka_producer:
    build: ./kafka
    env_file:
      - ./.env
    command: ["/wait-for-it.sh", "kafka_broker:29092", "--", "python3", "/app/kafka_producer.py"]
    depends_on:
      - kafka_broker
    networks:
      - mynetwork

  spark:
    build: ./spark
    env_file:
      - ./.env
    depends_on:
      - kafka_producer
    networks:
      - mynetwork

  database:
    build: ./database
    ports:
      - "9042:9042"
    env_file:
      - ./.env
    image: cassandra:4.1.1
    volumes:
      - cassandra-data:/var/lib/mysql
    networks:
      - mynetwork
  
  grafana:
    build: ./grafana
    ports:
      - "3000:3000"
    depends_on:
      - database
    env_file:
      - ./.env
    environment:
      GF_AUTH_DISABLE_LOGIN_FORM: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_SESSION_PROVIDER: "memory"  # Options: memory, database, redis, memcache
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - mynetwork

networks:
  mynetwork:
volumes:
  hadoop_namenode:
  hadoop_datanode:
  cassandra-data:
  grafana-data: